// Code generated by treegen; DO NOT EDIT.

package tree

// --- Walk code for Exprs ---

// Walk implements the Expr interface.
func (expr *AllColumnsSelector) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *AndExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkAndExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkAndExpr(v Visitor, n AndExpr) (_ AndExpr, changed bool) {
	if newLeft, changedLeft := WalkExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newRight, changedRight := WalkExpr(v, n.Right); changedRight {
		n.Right = newRight
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *AnnotateTypeExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkAnnotateTypeExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkAnnotateTypeExpr(v Visitor, n AnnotateTypeExpr) (_ AnnotateTypeExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *Array) Walk(v Visitor) Expr {
	if newExpr, changed := walkArray(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkArray(v Visitor, n Array) (_ Array, changed bool) {
	if newExprs, changedExprs := walkExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *ArrayFlatten) Walk(v Visitor) Expr {
	if newExpr, changed := walkArrayFlatten(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkArrayFlatten(v Visitor, n ArrayFlatten) (_ ArrayFlatten, changed bool) {
	if newSubquery, changedSubquery := WalkExpr(v, n.Subquery); changedSubquery {
		n.Subquery = newSubquery
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *BinaryExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkBinaryExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkBinaryExpr(v Visitor, n BinaryExpr) (_ BinaryExpr, changed bool) {
	if newLeft, changedLeft := WalkExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newRight, changedRight := WalkExpr(v, n.Right); changedRight {
		n.Right = newRight
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *CaseExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkCaseExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkCaseExpr(v Visitor, n CaseExpr) (_ CaseExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	if newWhens, changedWhens := walkSliceOfStarWhen(v, n.Whens); changedWhens {
		n.Whens = newWhens
		changed = true
	}
	if newElse, changedElse := WalkExpr(v, n.Else); changedElse {
		n.Else = newElse
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *CastExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkCastExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkCastExpr(v Visitor, n CastExpr) (_ CastExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *CoalesceExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkCoalesceExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkCoalesceExpr(v Visitor, n CoalesceExpr) (_ CoalesceExpr, changed bool) {
	if newExprs, changedExprs := walkExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *CollateExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkCollateExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkCollateExpr(v Visitor, n CollateExpr) (_ CollateExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *ColumnAccessExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkColumnAccessExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkColumnAccessExpr(v Visitor, n ColumnAccessExpr) (_ ColumnAccessExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *ColumnItem) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *CommentOnColumn) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *ComparisonExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkComparisonExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkComparisonExpr(v Visitor, n ComparisonExpr) (_ ComparisonExpr, changed bool) {
	if newLeft, changedLeft := WalkExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newRight, changedRight := WalkExpr(v, n.Right); changedRight {
		n.Right = newRight
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *DArray) Walk(v Visitor) Expr {
	if newExpr, changed := walkDArray(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkDArray(v Visitor, n DArray) (_ DArray, changed bool) {
	if newArray, changedArray := walkDatums(v, n.Array); changedArray {
		n.Array = newArray
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *DBitArray) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DBool) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DBox2D) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DBytes) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DCollatedString) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DDate) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DDecimal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr DefaultVal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DEncodedKey) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DEnum) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DFloat) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DGeography) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DGeometry) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DInt) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DInterval) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DIPAddr) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DJSON) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr dNull) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DOid) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DOidWrapper) Walk(v Visitor) Expr {
	if newExpr, changed := walkDOidWrapper(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkDOidWrapper(v Visitor, n DOidWrapper) (_ DOidWrapper, changed bool) {
	if newWrapped, changedWrapped := walkDatum(v, n.Wrapped); changedWrapped {
		n.Wrapped = newWrapped
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *DString) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DTime) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DTimestamp) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DTimestampTZ) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DTimeTZ) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DTuple) Walk(v Visitor) Expr {
	if newExpr, changed := walkDTuple(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkDTuple(v Visitor, n DTuple) (_ DTuple, changed bool) {
	if newD, changedD := walkDatums(v, n.D); changedD {
		n.D = newD
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *DUuid) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *DVoid) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *FuncExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkFuncExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkFuncExpr(v Visitor, n FuncExpr) (_ FuncExpr, changed bool) {
	if newExprs, changedExprs := walkExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	if newFilter, changedFilter := WalkExpr(v, n.Filter); changedFilter {
		n.Filter = newFilter
		changed = true
	}
	if n.WindowDef != nil {
		if newWindowDef, changedWindowDef := walkWindowDef(v, *n.WindowDef); changedWindowDef {
			n.WindowDef = &newWindowDef
			changed = true
		}
	}
	if newOrderBy, changedOrderBy := walkOrderBy(v, n.OrderBy); changedOrderBy {
		n.OrderBy = newOrderBy
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IfErrExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIfErrExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIfErrExpr(v Visitor, n IfErrExpr) (_ IfErrExpr, changed bool) {
	if newCond, changedCond := WalkExpr(v, n.Cond); changedCond {
		n.Cond = newCond
		changed = true
	}
	if newElse, changedElse := WalkExpr(v, n.Else); changedElse {
		n.Else = newElse
		changed = true
	}
	if newErrCode, changedErrCode := WalkExpr(v, n.ErrCode); changedErrCode {
		n.ErrCode = newErrCode
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IfExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIfExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIfExpr(v Visitor, n IfExpr) (_ IfExpr, changed bool) {
	if newCond, changedCond := WalkExpr(v, n.Cond); changedCond {
		n.Cond = newCond
		changed = true
	}
	if newTrue, changedTrue := WalkExpr(v, n.True); changedTrue {
		n.True = newTrue
		changed = true
	}
	if newElse, changedElse := WalkExpr(v, n.Else); changedElse {
		n.Else = newElse
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IndexedVar) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *IndirectionExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIndirectionExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIndirectionExpr(v Visitor, n IndirectionExpr) (_ IndirectionExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	if newIndirection, changedIndirection := walkArraySubscripts(v, n.Indirection); changedIndirection {
		n.Indirection = newIndirection
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IsNotNullExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIsNotNullExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIsNotNullExpr(v Visitor, n IsNotNullExpr) (_ IsNotNullExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IsNullExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIsNullExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIsNullExpr(v Visitor, n IsNullExpr) (_ IsNullExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *IsOfTypeExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkIsOfTypeExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkIsOfTypeExpr(v Visitor, n IsOfTypeExpr) (_ IsOfTypeExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *NotExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkNotExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkNotExpr(v Visitor, n NotExpr) (_ NotExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *NullIfExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkNullIfExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkNullIfExpr(v Visitor, n NullIfExpr) (_ NullIfExpr, changed bool) {
	if newExpr1, changedExpr1 := WalkExpr(v, n.Expr1); changedExpr1 {
		n.Expr1 = newExpr1
		changed = true
	}
	if newExpr2, changedExpr2 := WalkExpr(v, n.Expr2); changedExpr2 {
		n.Expr2 = newExpr2
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *NumVal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *OrExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkOrExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkOrExpr(v Visitor, n OrExpr) (_ OrExpr, changed bool) {
	if newLeft, changedLeft := WalkExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newRight, changedRight := WalkExpr(v, n.Right); changedRight {
		n.Right = newRight
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *ParenExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkParenExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkParenExpr(v Visitor, n ParenExpr) (_ ParenExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr PartitionMaxVal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr PartitionMinVal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *Placeholder) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *RangeCond) Walk(v Visitor) Expr {
	if newExpr, changed := walkRangeCond(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkRangeCond(v Visitor, n RangeCond) (_ RangeCond, changed bool) {
	if newLeft, changedLeft := WalkExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newFrom, changedFrom := WalkExpr(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newTo, changedTo := WalkExpr(v, n.To); changedTo {
		n.To = newTo
		changed = true
	}
	if newleftTo, changedleftTo := walkTypedExpr(v, n.leftTo); changedleftTo {
		n.leftTo = newleftTo
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *StrVal) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *Subquery) Walk(v Visitor) Expr {
	if newExpr, changed := walkSubquery(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkSubquery(v Visitor, n Subquery) (_ Subquery, changed bool) {
	if newSelect, changedSelect := walkSelectStatement(v, n.Select); changedSelect {
		n.Select = newSelect
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *Tuple) Walk(v Visitor) Expr {
	if newExpr, changed := walkTuple(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkTuple(v Visitor, n Tuple) (_ Tuple, changed bool) {
	if newExprs, changedExprs := walkExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *TupleStar) Walk(v Visitor) Expr {
	if newExpr, changed := walkTupleStar(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkTupleStar(v Visitor, n TupleStar) (_ TupleStar, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr *TypedDummy) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *UnaryExpr) Walk(v Visitor) Expr {
	if newExpr, changed := walkUnaryExpr(v, *expr); changed {
		return &newExpr
	}
	return expr
}

func walkUnaryExpr(v Visitor, n UnaryExpr) (_ UnaryExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

// Walk implements the Expr interface.
func (expr UnqualifiedStar) Walk(_ Visitor) Expr { return expr }

// Walk implements the Expr interface.
func (expr *UnresolvedName) Walk(_ Visitor) Expr { return expr }

// --- Walk code for Statements ---

var _ walkableStmt = (*AlterBackup)(nil)

// walkStmt implements the Expr interface.
func (stmt *AlterBackup) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAlterBackup(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAlterBackup(v Visitor, n AlterBackup) (_ AlterBackup, changed bool) {
	if newBackup, changedBackup := WalkExpr(v, n.Backup); changedBackup {
		n.Backup = newBackup
		changed = true
	}
	if newSubdir, changedSubdir := WalkExpr(v, n.Subdir); changedSubdir {
		n.Subdir = newSubdir
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*AlterChangefeed)(nil)

// walkStmt implements the Expr interface.
func (stmt *AlterChangefeed) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAlterChangefeed(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAlterChangefeed(v Visitor, n AlterChangefeed) (_ AlterChangefeed, changed bool) {
	if newJobs, changedJobs := WalkExpr(v, n.Jobs); changedJobs {
		n.Jobs = newJobs
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*AlterRole)(nil)

// walkStmt implements the Expr interface.
func (stmt *AlterRole) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAlterRole(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAlterRole(v Visitor, n AlterRole) (_ AlterRole, changed bool) {
	if newKVOptions, changedKVOptions := walkKVOptions(v, n.KVOptions); changedKVOptions {
		n.KVOptions = newKVOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*AlterRoleSet)(nil)

// walkStmt implements the Expr interface.
func (stmt *AlterRoleSet) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAlterRoleSet(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAlterRoleSet(v Visitor, n AlterRoleSet) (_ AlterRoleSet, changed bool) {
	if n.SetOrReset != nil {
		if newSetOrReset, changedSetOrReset := walkSetVar(v, *n.SetOrReset); changedSetOrReset {
			n.SetOrReset = &newSetOrReset
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*AlterTenantSetClusterSetting)(nil)

// walkStmt implements the Expr interface.
func (stmt *AlterTenantSetClusterSetting) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAlterTenantSetClusterSetting(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAlterTenantSetClusterSetting(v Visitor, n AlterTenantSetClusterSetting) (_ AlterTenantSetClusterSetting, changed bool) {
	if newValue, changedValue := WalkExpr(v, n.Value); changedValue {
		n.Value = newValue
		changed = true
	}
	if newTenantID, changedTenantID := WalkExpr(v, n.TenantID); changedTenantID {
		n.TenantID = newTenantID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Analyze)(nil)

// walkStmt implements the Expr interface.
func (stmt *Analyze) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkAnalyze(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkAnalyze(v Visitor, n Analyze) (_ Analyze, changed bool) {
	if newTable, changedTable := walkTableExpr(v, n.Table); changedTable {
		n.Table = newTable
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Backup)(nil)

// walkStmt implements the Expr interface.
func (stmt *Backup) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkBackup(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkBackup(v Visitor, n Backup) (_ Backup, changed bool) {
	if newTo, changedTo := walkStringOrPlaceholderOptList(v, n.To); changedTo {
		n.To = newTo
		changed = true
	}
	if newIncrementalFrom, changedIncrementalFrom := walkExprs(v, n.IncrementalFrom); changedIncrementalFrom {
		n.IncrementalFrom = newIncrementalFrom
		changed = true
	}
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	if newOptions, changedOptions := walkBackupOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	if newSubdir, changedSubdir := WalkExpr(v, n.Subdir); changedSubdir {
		n.Subdir = newSubdir
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*BeginTransaction)(nil)

// walkStmt implements the Expr interface.
func (stmt *BeginTransaction) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkBeginTransaction(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkBeginTransaction(v Visitor, n BeginTransaction) (_ BeginTransaction, changed bool) {
	if newModes, changedModes := walkTransactionModes(v, n.Modes); changedModes {
		n.Modes = newModes
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CancelQueries)(nil)

// walkStmt implements the Expr interface.
func (stmt *CancelQueries) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCancelQueries(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCancelQueries(v Visitor, n CancelQueries) (_ CancelQueries, changed bool) {
	if n.Queries != nil {
		if newQueries, changedQueries := walkSelect(v, *n.Queries); changedQueries {
			n.Queries = &newQueries
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*CancelSessions)(nil)

// walkStmt implements the Expr interface.
func (stmt *CancelSessions) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCancelSessions(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCancelSessions(v Visitor, n CancelSessions) (_ CancelSessions, changed bool) {
	if n.Sessions != nil {
		if newSessions, changedSessions := walkSelect(v, *n.Sessions); changedSessions {
			n.Sessions = &newSessions
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ControlJobs)(nil)

// walkStmt implements the Expr interface.
func (stmt *ControlJobs) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkControlJobs(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkControlJobs(v Visitor, n ControlJobs) (_ ControlJobs, changed bool) {
	if n.Jobs != nil {
		if newJobs, changedJobs := walkSelect(v, *n.Jobs); changedJobs {
			n.Jobs = &newJobs
			changed = true
		}
	}
	if newReason, changedReason := WalkExpr(v, n.Reason); changedReason {
		n.Reason = newReason
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ControlJobsForSchedules)(nil)

// walkStmt implements the Expr interface.
func (stmt *ControlJobsForSchedules) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkControlJobsForSchedules(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkControlJobsForSchedules(v Visitor, n ControlJobsForSchedules) (_ ControlJobsForSchedules, changed bool) {
	if n.Schedules != nil {
		if newSchedules, changedSchedules := walkSelect(v, *n.Schedules); changedSchedules {
			n.Schedules = &newSchedules
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ControlSchedules)(nil)

// walkStmt implements the Expr interface.
func (stmt *ControlSchedules) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkControlSchedules(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkControlSchedules(v Visitor, n ControlSchedules) (_ ControlSchedules, changed bool) {
	if n.Schedules != nil {
		if newSchedules, changedSchedules := walkSelect(v, *n.Schedules); changedSchedules {
			n.Schedules = &newSchedules
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*CopyFrom)(nil)

// walkStmt implements the Expr interface.
func (stmt *CopyFrom) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCopyFrom(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCopyFrom(v Visitor, n CopyFrom) (_ CopyFrom, changed bool) {
	if newOptions, changedOptions := walkCopyOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CreateChangefeed)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateChangefeed) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateChangefeed(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateChangefeed(v Visitor, n CreateChangefeed) (_ CreateChangefeed, changed bool) {
	if newSinkURI, changedSinkURI := WalkExpr(v, n.SinkURI); changedSinkURI {
		n.SinkURI = newSinkURI
		changed = true
	}
	if newOptions, changedOptions := walkKVOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CreateIndex)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateIndex) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateIndex(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateIndex(v Visitor, n CreateIndex) (_ CreateIndex, changed bool) {
	if newColumns, changedColumns := walkIndexElemList(v, n.Columns); changedColumns {
		n.Columns = newColumns
		changed = true
	}
	if n.Sharded != nil {
		if newSharded, changedSharded := walkShardedIndexDef(v, *n.Sharded); changedSharded {
			n.Sharded = &newSharded
			changed = true
		}
	}
	if n.PartitionByIndex != nil {
		if newPartitionByIndex, changedPartitionByIndex := walkPartitionByIndex(v, *n.PartitionByIndex); changedPartitionByIndex {
			n.PartitionByIndex = &newPartitionByIndex
			changed = true
		}
	}
	if newStorageParams, changedStorageParams := walkStorageParams(v, n.StorageParams); changedStorageParams {
		n.StorageParams = newStorageParams
		changed = true
	}
	if newPredicate, changedPredicate := WalkExpr(v, n.Predicate); changedPredicate {
		n.Predicate = newPredicate
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CreateRole)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateRole) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateRole(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateRole(v Visitor, n CreateRole) (_ CreateRole, changed bool) {
	if newKVOptions, changedKVOptions := walkKVOptions(v, n.KVOptions); changedKVOptions {
		n.KVOptions = newKVOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CreateStats)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateStats) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateStats(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateStats(v Visitor, n CreateStats) (_ CreateStats, changed bool) {
	if newTable, changedTable := walkTableExpr(v, n.Table); changedTable {
		n.Table = newTable
		changed = true
	}
	if newOptions, changedOptions := walkCreateStatsOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*CreateTable)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateTable) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateTable(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateTable(v Visitor, n CreateTable) (_ CreateTable, changed bool) {
	if n.PartitionByTable != nil {
		if newPartitionByTable, changedPartitionByTable := walkPartitionByTable(v, *n.PartitionByTable); changedPartitionByTable {
			n.PartitionByTable = &newPartitionByTable
			changed = true
		}
	}
	if newStorageParams, changedStorageParams := walkStorageParams(v, n.StorageParams); changedStorageParams {
		n.StorageParams = newStorageParams
		changed = true
	}
	if n.AsSource != nil {
		if newAsSource, changedAsSource := walkSelect(v, *n.AsSource); changedAsSource {
			n.AsSource = &newAsSource
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*CreateView)(nil)

// walkStmt implements the Expr interface.
func (stmt *CreateView) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkCreateView(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkCreateView(v Visitor, n CreateView) (_ CreateView, changed bool) {
	if n.AsSource != nil {
		if newAsSource, changedAsSource := walkSelect(v, *n.AsSource); changedAsSource {
			n.AsSource = &newAsSource
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*DeclareCursor)(nil)

// walkStmt implements the Expr interface.
func (stmt *DeclareCursor) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkDeclareCursor(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkDeclareCursor(v Visitor, n DeclareCursor) (_ DeclareCursor, changed bool) {
	if n.Select != nil {
		if newSelect, changedSelect := walkSelect(v, *n.Select); changedSelect {
			n.Select = &newSelect
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*Delete)(nil)

// walkStmt implements the Expr interface.
func (stmt *Delete) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkDelete(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkDelete(v Visitor, n Delete) (_ Delete, changed bool) {
	if n.With != nil {
		if newWith, changedWith := walkWith(v, *n.With); changedWith {
			n.With = &newWith
			changed = true
		}
	}
	if newTable, changedTable := walkTableExpr(v, n.Table); changedTable {
		n.Table = newTable
		changed = true
	}
	if n.Where != nil {
		if newWhere, changedWhere := walkWhere(v, *n.Where); changedWhere {
			n.Where = &newWhere
			changed = true
		}
	}
	if newOrderBy, changedOrderBy := walkOrderBy(v, n.OrderBy); changedOrderBy {
		n.OrderBy = newOrderBy
		changed = true
	}
	if n.Limit != nil {
		if newLimit, changedLimit := walkLimit(v, *n.Limit); changedLimit {
			n.Limit = &newLimit
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*Execute)(nil)

// walkStmt implements the Expr interface.
func (stmt *Execute) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkExecute(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkExecute(v Visitor, n Execute) (_ Execute, changed bool) {
	if newParams, changedParams := walkExprs(v, n.Params); changedParams {
		n.Params = newParams
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Explain)(nil)

// walkStmt implements the Expr interface.
func (stmt *Explain) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkExplain(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkExplain(v Visitor, n Explain) (_ Explain, changed bool) {
	if newStatement, changedStatement := walkStatement(v, n.Statement); changedStatement {
		n.Statement = newStatement
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ExplainAnalyze)(nil)

// walkStmt implements the Expr interface.
func (stmt *ExplainAnalyze) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkExplainAnalyze(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkExplainAnalyze(v Visitor, n ExplainAnalyze) (_ ExplainAnalyze, changed bool) {
	if newStatement, changedStatement := walkStatement(v, n.Statement); changedStatement {
		n.Statement = newStatement
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Export)(nil)

// walkStmt implements the Expr interface.
func (stmt *Export) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkExport(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkExport(v Visitor, n Export) (_ Export, changed bool) {
	if n.Query != nil {
		if newQuery, changedQuery := walkSelect(v, *n.Query); changedQuery {
			n.Query = &newQuery
			changed = true
		}
	}
	if newFile, changedFile := WalkExpr(v, n.File); changedFile {
		n.File = newFile
		changed = true
	}
	if newOptions, changedOptions := walkKVOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Import)(nil)

// walkStmt implements the Expr interface.
func (stmt *Import) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkImport(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkImport(v Visitor, n Import) (_ Import, changed bool) {
	if newFiles, changedFiles := walkExprs(v, n.Files); changedFiles {
		n.Files = newFiles
		changed = true
	}
	if newOptions, changedOptions := walkKVOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Insert)(nil)

// walkStmt implements the Expr interface.
func (stmt *Insert) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkInsert(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkInsert(v Visitor, n Insert) (_ Insert, changed bool) {
	if n.With != nil {
		if newWith, changedWith := walkWith(v, *n.With); changedWith {
			n.With = &newWith
			changed = true
		}
	}
	if newTable, changedTable := walkTableExpr(v, n.Table); changedTable {
		n.Table = newTable
		changed = true
	}
	if n.Rows != nil {
		if newRows, changedRows := walkSelect(v, *n.Rows); changedRows {
			n.Rows = &newRows
			changed = true
		}
	}
	if n.OnConflict != nil {
		if newOnConflict, changedOnConflict := walkOnConflict(v, *n.OnConflict); changedOnConflict {
			n.OnConflict = &newOnConflict
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ParenSelect)(nil)

// walkStmt implements the Expr interface.
func (stmt *ParenSelect) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkParenSelect(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkParenSelect(v Visitor, n ParenSelect) (_ ParenSelect, changed bool) {
	if n.Select != nil {
		if newSelect, changedSelect := walkSelect(v, *n.Select); changedSelect {
			n.Select = &newSelect
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*Prepare)(nil)

// walkStmt implements the Expr interface.
func (stmt *Prepare) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkPrepare(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkPrepare(v Visitor, n Prepare) (_ Prepare, changed bool) {
	if newStatement, changedStatement := walkStatement(v, n.Statement); changedStatement {
		n.Statement = newStatement
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Relocate)(nil)

// walkStmt implements the Expr interface.
func (stmt *Relocate) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkRelocate(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkRelocate(v Visitor, n Relocate) (_ Relocate, changed bool) {
	if n.Rows != nil {
		if newRows, changedRows := walkSelect(v, *n.Rows); changedRows {
			n.Rows = &newRows
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*RelocateRange)(nil)

// walkStmt implements the Expr interface.
func (stmt *RelocateRange) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkRelocateRange(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkRelocateRange(v Visitor, n RelocateRange) (_ RelocateRange, changed bool) {
	if n.Rows != nil {
		if newRows, changedRows := walkSelect(v, *n.Rows); changedRows {
			n.Rows = &newRows
			changed = true
		}
	}
	if newToStoreID, changedToStoreID := WalkExpr(v, n.ToStoreID); changedToStoreID {
		n.ToStoreID = newToStoreID
		changed = true
	}
	if newFromStoreID, changedFromStoreID := WalkExpr(v, n.FromStoreID); changedFromStoreID {
		n.FromStoreID = newFromStoreID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Restore)(nil)

// walkStmt implements the Expr interface.
func (stmt *Restore) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkRestore(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkRestore(v Visitor, n Restore) (_ Restore, changed bool) {
	if newFrom, changedFrom := walkSliceOfStringOrPlaceholderOptList(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	if newOptions, changedOptions := walkRestoreOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	if newSubdir, changedSubdir := WalkExpr(v, n.Subdir); changedSubdir {
		n.Subdir = newSubdir
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Scatter)(nil)

// walkStmt implements the Expr interface.
func (stmt *Scatter) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkScatter(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkScatter(v Visitor, n Scatter) (_ Scatter, changed bool) {
	if newFrom, changedFrom := walkExprs(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newTo, changedTo := walkExprs(v, n.To); changedTo {
		n.To = newTo
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ScheduledBackup)(nil)

// walkStmt implements the Expr interface.
func (stmt *ScheduledBackup) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkScheduledBackup(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkScheduledBackup(v Visitor, n ScheduledBackup) (_ ScheduledBackup, changed bool) {
	if newScheduleLabelSpec, changedScheduleLabelSpec := walkScheduleLabelSpec(v, n.ScheduleLabelSpec); changedScheduleLabelSpec {
		n.ScheduleLabelSpec = newScheduleLabelSpec
		changed = true
	}
	if newRecurrence, changedRecurrence := WalkExpr(v, n.Recurrence); changedRecurrence {
		n.Recurrence = newRecurrence
		changed = true
	}
	if n.FullBackup != nil {
		if newFullBackup, changedFullBackup := walkFullBackupClause(v, *n.FullBackup); changedFullBackup {
			n.FullBackup = &newFullBackup
			changed = true
		}
	}
	if newTo, changedTo := walkStringOrPlaceholderOptList(v, n.To); changedTo {
		n.To = newTo
		changed = true
	}
	if newBackupOptions, changedBackupOptions := walkBackupOptions(v, n.BackupOptions); changedBackupOptions {
		n.BackupOptions = newBackupOptions
		changed = true
	}
	if newScheduleOptions, changedScheduleOptions := walkKVOptions(v, n.ScheduleOptions); changedScheduleOptions {
		n.ScheduleOptions = newScheduleOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Scrub)(nil)

// walkStmt implements the Expr interface.
func (stmt *Scrub) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkScrub(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkScrub(v Visitor, n Scrub) (_ Scrub, changed bool) {
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Select)(nil)

// walkStmt implements the Expr interface.
func (stmt *Select) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSelect(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSelect(v Visitor, n Select) (_ Select, changed bool) {
	if n.With != nil {
		if newWith, changedWith := walkWith(v, *n.With); changedWith {
			n.With = &newWith
			changed = true
		}
	}
	if newSelect, changedSelect := walkSelectStatement(v, n.Select); changedSelect {
		n.Select = newSelect
		changed = true
	}
	if newOrderBy, changedOrderBy := walkOrderBy(v, n.OrderBy); changedOrderBy {
		n.OrderBy = newOrderBy
		changed = true
	}
	if n.Limit != nil {
		if newLimit, changedLimit := walkLimit(v, *n.Limit); changedLimit {
			n.Limit = &newLimit
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*SelectClause)(nil)

// walkStmt implements the Expr interface.
func (stmt *SelectClause) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSelectClause(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSelectClause(v Visitor, n SelectClause) (_ SelectClause, changed bool) {
	if newFrom, changedFrom := walkFrom(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newDistinctOn, changedDistinctOn := walkDistinctOn(v, n.DistinctOn); changedDistinctOn {
		n.DistinctOn = newDistinctOn
		changed = true
	}
	if newExprs, changedExprs := walkSelectExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	if newGroupBy, changedGroupBy := walkGroupBy(v, n.GroupBy); changedGroupBy {
		n.GroupBy = newGroupBy
		changed = true
	}
	if newWindow, changedWindow := walkWindow(v, n.Window); changedWindow {
		n.Window = newWindow
		changed = true
	}
	if n.Having != nil {
		if newHaving, changedHaving := walkWhere(v, *n.Having); changedHaving {
			n.Having = &newHaving
			changed = true
		}
	}
	if n.Where != nil {
		if newWhere, changedWhere := walkWhere(v, *n.Where); changedWhere {
			n.Where = &newWhere
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*SetClusterSetting)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetClusterSetting) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetClusterSetting(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetClusterSetting(v Visitor, n SetClusterSetting) (_ SetClusterSetting, changed bool) {
	if newValue, changedValue := WalkExpr(v, n.Value); changedValue {
		n.Value = newValue
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*SetSessionCharacteristics)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetSessionCharacteristics) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetSessionCharacteristics(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetSessionCharacteristics(v Visitor, n SetSessionCharacteristics) (_ SetSessionCharacteristics, changed bool) {
	if newModes, changedModes := walkTransactionModes(v, n.Modes); changedModes {
		n.Modes = newModes
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*SetTracing)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetTracing) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetTracing(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetTracing(v Visitor, n SetTracing) (_ SetTracing, changed bool) {
	if newValues, changedValues := walkExprs(v, n.Values); changedValues {
		n.Values = newValues
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*SetTransaction)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetTransaction) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetTransaction(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetTransaction(v Visitor, n SetTransaction) (_ SetTransaction, changed bool) {
	if newModes, changedModes := walkTransactionModes(v, n.Modes); changedModes {
		n.Modes = newModes
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*SetVar)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetVar) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetVar(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetVar(v Visitor, n SetVar) (_ SetVar, changed bool) {
	if newValues, changedValues := walkExprs(v, n.Values); changedValues {
		n.Values = newValues
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*SetZoneConfig)(nil)

// walkStmt implements the Expr interface.
func (stmt *SetZoneConfig) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSetZoneConfig(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSetZoneConfig(v Visitor, n SetZoneConfig) (_ SetZoneConfig, changed bool) {
	if newYAMLConfig, changedYAMLConfig := WalkExpr(v, n.YAMLConfig); changedYAMLConfig {
		n.YAMLConfig = newYAMLConfig
		changed = true
	}
	if newOptions, changedOptions := walkKVOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowBackup)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowBackup) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowBackup(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowBackup(v Visitor, n ShowBackup) (_ ShowBackup, changed bool) {
	if newPath, changedPath := WalkExpr(v, n.Path); changedPath {
		n.Path = newPath
		changed = true
	}
	if newInCollection, changedInCollection := WalkExpr(v, n.InCollection); changedInCollection {
		n.InCollection = newInCollection
		changed = true
	}
	if newOptions, changedOptions := walkKVOptions(v, n.Options); changedOptions {
		n.Options = newOptions
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowChangefeedJobs)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowChangefeedJobs) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowChangefeedJobs(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowChangefeedJobs(v Visitor, n ShowChangefeedJobs) (_ ShowChangefeedJobs, changed bool) {
	if n.Jobs != nil {
		if newJobs, changedJobs := walkSelect(v, *n.Jobs); changedJobs {
			n.Jobs = &newJobs
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ShowCreateSchedules)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowCreateSchedules) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowCreateSchedules(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowCreateSchedules(v Visitor, n ShowCreateSchedules) (_ ShowCreateSchedules, changed bool) {
	if newScheduleID, changedScheduleID := WalkExpr(v, n.ScheduleID); changedScheduleID {
		n.ScheduleID = newScheduleID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowJobs)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowJobs) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowJobs(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowJobs(v Visitor, n ShowJobs) (_ ShowJobs, changed bool) {
	if n.Jobs != nil {
		if newJobs, changedJobs := walkSelect(v, *n.Jobs); changedJobs {
			n.Jobs = &newJobs
			changed = true
		}
	}
	if n.Schedules != nil {
		if newSchedules, changedSchedules := walkSelect(v, *n.Schedules); changedSchedules {
			n.Schedules = &newSchedules
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ShowRangeForRow)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowRangeForRow) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowRangeForRow(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowRangeForRow(v Visitor, n ShowRangeForRow) (_ ShowRangeForRow, changed bool) {
	if newRow, changedRow := walkExprs(v, n.Row); changedRow {
		n.Row = newRow
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowSchedules)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowSchedules) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowSchedules(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowSchedules(v Visitor, n ShowSchedules) (_ ShowSchedules, changed bool) {
	if newScheduleID, changedScheduleID := WalkExpr(v, n.ScheduleID); changedScheduleID {
		n.ScheduleID = newScheduleID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowTenantClusterSetting)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowTenantClusterSetting) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowTenantClusterSetting(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowTenantClusterSetting(v Visitor, n ShowTenantClusterSetting) (_ ShowTenantClusterSetting, changed bool) {
	if newTenantID, changedTenantID := WalkExpr(v, n.TenantID); changedTenantID {
		n.TenantID = newTenantID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*ShowTenantClusterSettingList)(nil)

// walkStmt implements the Expr interface.
func (stmt *ShowTenantClusterSettingList) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkShowTenantClusterSettingList(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkShowTenantClusterSettingList(v Visitor, n ShowTenantClusterSettingList) (_ ShowTenantClusterSettingList, changed bool) {
	if newTenantID, changedTenantID := WalkExpr(v, n.TenantID); changedTenantID {
		n.TenantID = newTenantID
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*Split)(nil)

// walkStmt implements the Expr interface.
func (stmt *Split) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkSplit(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkSplit(v Visitor, n Split) (_ Split, changed bool) {
	if n.Rows != nil {
		if newRows, changedRows := walkSelect(v, *n.Rows); changedRows {
			n.Rows = &newRows
			changed = true
		}
	}
	if newExpireExpr, changedExpireExpr := WalkExpr(v, n.ExpireExpr); changedExpireExpr {
		n.ExpireExpr = newExpireExpr
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*StreamIngestion)(nil)

// walkStmt implements the Expr interface.
func (stmt *StreamIngestion) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkStreamIngestion(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkStreamIngestion(v Visitor, n StreamIngestion) (_ StreamIngestion, changed bool) {
	if newFrom, changedFrom := walkStringOrPlaceholderOptList(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	return n, changed
}

var _ walkableStmt = (*UnionClause)(nil)

// walkStmt implements the Expr interface.
func (stmt *UnionClause) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkUnionClause(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkUnionClause(v Visitor, n UnionClause) (_ UnionClause, changed bool) {
	if n.Left != nil {
		if newLeft, changedLeft := walkSelect(v, *n.Left); changedLeft {
			n.Left = &newLeft
			changed = true
		}
	}
	if n.Right != nil {
		if newRight, changedRight := walkSelect(v, *n.Right); changedRight {
			n.Right = &newRight
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*Unsplit)(nil)

// walkStmt implements the Expr interface.
func (stmt *Unsplit) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkUnsplit(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkUnsplit(v Visitor, n Unsplit) (_ Unsplit, changed bool) {
	if n.Rows != nil {
		if newRows, changedRows := walkSelect(v, *n.Rows); changedRows {
			n.Rows = &newRows
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*Update)(nil)

// walkStmt implements the Expr interface.
func (stmt *Update) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkUpdate(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkUpdate(v Visitor, n Update) (_ Update, changed bool) {
	if n.With != nil {
		if newWith, changedWith := walkWith(v, *n.With); changedWith {
			n.With = &newWith
			changed = true
		}
	}
	if newTable, changedTable := walkTableExpr(v, n.Table); changedTable {
		n.Table = newTable
		changed = true
	}
	if newExprs, changedExprs := walkUpdateExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	if newFrom, changedFrom := walkTableExprs(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if n.Where != nil {
		if newWhere, changedWhere := walkWhere(v, *n.Where); changedWhere {
			n.Where = &newWhere
			changed = true
		}
	}
	if newOrderBy, changedOrderBy := walkOrderBy(v, n.OrderBy); changedOrderBy {
		n.OrderBy = newOrderBy
		changed = true
	}
	if n.Limit != nil {
		if newLimit, changedLimit := walkLimit(v, *n.Limit); changedLimit {
			n.Limit = &newLimit
			changed = true
		}
	}
	return n, changed
}

var _ walkableStmt = (*ValuesClause)(nil)

// walkStmt implements the Expr interface.
func (stmt *ValuesClause) walkStmt(v Visitor) (_ Statement, changed bool) {
	if newStmt, changed := walkValuesClause(v, *stmt); changed {
		return &newStmt, true
	}
	return stmt, false
}

func walkValuesClause(v Visitor, n ValuesClause) (_ ValuesClause, changed bool) {
	if newRows, changedRows := walkSliceOfExprs(v, n.Rows); changedRows {
		n.Rows = newRows
		changed = true
	}
	return n, changed
}

// --- Walk code for TableExprs ---

var _ TableExpr = (*AliasedTableExpr)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *AliasedTableExpr) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkAliasedTableExpr(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

func walkAliasedTableExpr(v Visitor, n AliasedTableExpr) (_ AliasedTableExpr, changed bool) {
	if newExpr, changedExpr := walkTableExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

var _ TableExpr = (*JoinTableExpr)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *JoinTableExpr) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkJoinTableExpr(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

func walkJoinTableExpr(v Visitor, n JoinTableExpr) (_ JoinTableExpr, changed bool) {
	if newLeft, changedLeft := walkTableExpr(v, n.Left); changedLeft {
		n.Left = newLeft
		changed = true
	}
	if newRight, changedRight := walkTableExpr(v, n.Right); changedRight {
		n.Right = newRight
		changed = true
	}
	return n, changed
}

var _ TableExpr = (*ParenTableExpr)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *ParenTableExpr) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkParenTableExpr(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

func walkParenTableExpr(v Visitor, n ParenTableExpr) (_ ParenTableExpr, changed bool) {
	if newExpr, changedExpr := walkTableExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

var _ TableExpr = (*RowsFromExpr)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *RowsFromExpr) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkRowsFromExpr(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

func walkRowsFromExpr(v Visitor, n RowsFromExpr) (_ RowsFromExpr, changed bool) {
	if newItems, changedItems := walkExprs(v, n.Items); changedItems {
		n.Items = newItems
		changed = true
	}
	return n, changed
}

var _ TableExpr = (*StatementSource)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *StatementSource) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkStatementSource(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

func walkStatementSource(v Visitor, n StatementSource) (_ StatementSource, changed bool) {
	if newStatement, changedStatement := walkStatement(v, n.Statement); changedStatement {
		n.Statement = newStatement
		changed = true
	}
	return n, changed
}

var _ TableExpr = (*Subquery)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *Subquery) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	if newExpr, changed := walkSubquery(v, *expr); changed {
		return &newExpr, true
	}
	return expr, false
}

var _ TableExpr = (*TableName)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *TableName) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) { return expr, false }

var _ TableExpr = (*TableRef)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *TableRef) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) { return expr, false }

var _ TableExpr = (*UnresolvedObjectName)(nil)

// WalkTableExpr implements the TableExpr interface.
func (expr *UnresolvedObjectName) WalkTableExpr(v Visitor) (_ TableExpr, changed bool) {
	return expr, false
}

// --- Walk code for helpers ---

func walkSliceOfStarCTE(v Visitor, n []*CTE) (_ []*CTE, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkCTE(v, *n[i]); elemChanged {
			if !changed {
				n = append([]*CTE(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkSliceOfStarWhen(v Visitor, n []*When) (_ []*When, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkWhen(v, *n[i]); elemChanged {
			if !changed {
				n = append([]*When(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkSliceOfExprs(v Visitor, n []Exprs) (_ []Exprs, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkExprs(v, n[i]); elemChanged {
			if !changed {
				n = append([]Exprs(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkSliceOfListPartition(v Visitor, n []ListPartition) (_ []ListPartition, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkListPartition(v, n[i]); elemChanged {
			if !changed {
				n = append([]ListPartition(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkSliceOfRangePartition(v Visitor, n []RangePartition) (_ []RangePartition, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkRangePartition(v, n[i]); elemChanged {
			if !changed {
				n = append([]RangePartition(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkSliceOfStringOrPlaceholderOptList(v Visitor, n []StringOrPlaceholderOptList) (_ []StringOrPlaceholderOptList, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkStringOrPlaceholderOptList(v, n[i]); elemChanged {
			if !changed {
				n = append([]StringOrPlaceholderOptList(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkArraySubscript(v Visitor, n ArraySubscript) (_ ArraySubscript, changed bool) {
	if newBegin, changedBegin := WalkExpr(v, n.Begin); changedBegin {
		n.Begin = newBegin
		changed = true
	}
	if newEnd, changedEnd := WalkExpr(v, n.End); changedEnd {
		n.End = newEnd
		changed = true
	}
	return n, changed
}

func walkArraySubscripts(v Visitor, n ArraySubscripts) (_ ArraySubscripts, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkArraySubscript(v, *n[i]); elemChanged {
			if !changed {
				n = append(ArraySubscripts(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkAsOfClause(v Visitor, n AsOfClause) (_ AsOfClause, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkBackupOptions(v Visitor, n BackupOptions) (_ BackupOptions, changed bool) {
	if newEncryptionPassphrase, changedEncryptionPassphrase := WalkExpr(v, n.EncryptionPassphrase); changedEncryptionPassphrase {
		n.EncryptionPassphrase = newEncryptionPassphrase
		changed = true
	}
	if newEncryptionKMSURI, changedEncryptionKMSURI := walkStringOrPlaceholderOptList(v, n.EncryptionKMSURI); changedEncryptionKMSURI {
		n.EncryptionKMSURI = newEncryptionKMSURI
		changed = true
	}
	if newIncrementalStorage, changedIncrementalStorage := walkStringOrPlaceholderOptList(v, n.IncrementalStorage); changedIncrementalStorage {
		n.IncrementalStorage = newIncrementalStorage
		changed = true
	}
	return n, changed
}

func walkCopyOptions(v Visitor, n CopyOptions) (_ CopyOptions, changed bool) {
	if newDestination, changedDestination := WalkExpr(v, n.Destination); changedDestination {
		n.Destination = newDestination
		changed = true
	}
	if newDelimiter, changedDelimiter := WalkExpr(v, n.Delimiter); changedDelimiter {
		n.Delimiter = newDelimiter
		changed = true
	}
	if newNull, changedNull := WalkExpr(v, n.Null); changedNull {
		n.Null = newNull
		changed = true
	}
	return n, changed
}

func walkCreateStatsOptions(v Visitor, n CreateStatsOptions) (_ CreateStatsOptions, changed bool) {
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	return n, changed
}

func walkCTE(v Visitor, n CTE) (_ CTE, changed bool) {
	if newStmt, changedStmt := walkStatement(v, n.Stmt); changedStmt {
		n.Stmt = newStmt
		changed = true
	}
	return n, changed
}

func walkDatums(v Visitor, n Datums) (_ Datums, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkDatum(v, n[i]); elemChanged {
			if !changed {
				n = append(Datums(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkDistinctOn(v Visitor, n DistinctOn) (_ DistinctOn, changed bool) {
	for i := range n {
		if newElem, elemChanged := WalkExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(DistinctOn(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkExprs(v Visitor, n Exprs) (_ Exprs, changed bool) {
	for i := range n {
		if newElem, elemChanged := WalkExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(Exprs(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkFrom(v Visitor, n From) (_ From, changed bool) {
	if newTables, changedTables := walkTableExprs(v, n.Tables); changedTables {
		n.Tables = newTables
		changed = true
	}
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	return n, changed
}

func walkFullBackupClause(v Visitor, n FullBackupClause) (_ FullBackupClause, changed bool) {
	if newRecurrence, changedRecurrence := WalkExpr(v, n.Recurrence); changedRecurrence {
		n.Recurrence = newRecurrence
		changed = true
	}
	return n, changed
}

func walkGroupBy(v Visitor, n GroupBy) (_ GroupBy, changed bool) {
	for i := range n {
		if newElem, elemChanged := WalkExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(GroupBy(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkIndexElem(v Visitor, n IndexElem) (_ IndexElem, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkIndexElemList(v Visitor, n IndexElemList) (_ IndexElemList, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkIndexElem(v, n[i]); elemChanged {
			if !changed {
				n = append(IndexElemList(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkKVOption(v Visitor, n KVOption) (_ KVOption, changed bool) {
	if newValue, changedValue := WalkExpr(v, n.Value); changedValue {
		n.Value = newValue
		changed = true
	}
	return n, changed
}

func walkKVOptions(v Visitor, n KVOptions) (_ KVOptions, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkKVOption(v, n[i]); elemChanged {
			if !changed {
				n = append(KVOptions(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkLimit(v Visitor, n Limit) (_ Limit, changed bool) {
	if newOffset, changedOffset := WalkExpr(v, n.Offset); changedOffset {
		n.Offset = newOffset
		changed = true
	}
	if newCount, changedCount := WalkExpr(v, n.Count); changedCount {
		n.Count = newCount
		changed = true
	}
	return n, changed
}

func walkListPartition(v Visitor, n ListPartition) (_ ListPartition, changed bool) {
	if newExprs, changedExprs := walkExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	if n.Subpartition != nil {
		if newSubpartition, changedSubpartition := walkPartitionBy(v, *n.Subpartition); changedSubpartition {
			n.Subpartition = &newSubpartition
			changed = true
		}
	}
	return n, changed
}

func walkOnConflict(v Visitor, n OnConflict) (_ OnConflict, changed bool) {
	if newArbiterPredicate, changedArbiterPredicate := WalkExpr(v, n.ArbiterPredicate); changedArbiterPredicate {
		n.ArbiterPredicate = newArbiterPredicate
		changed = true
	}
	if newExprs, changedExprs := walkUpdateExprs(v, n.Exprs); changedExprs {
		n.Exprs = newExprs
		changed = true
	}
	if n.Where != nil {
		if newWhere, changedWhere := walkWhere(v, *n.Where); changedWhere {
			n.Where = &newWhere
			changed = true
		}
	}
	return n, changed
}

func walkOrder(v Visitor, n Order) (_ Order, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkOrderBy(v Visitor, n OrderBy) (_ OrderBy, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkOrder(v, *n[i]); elemChanged {
			if !changed {
				n = append(OrderBy(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkPartitionBy(v Visitor, n PartitionBy) (_ PartitionBy, changed bool) {
	if newList, changedList := walkSliceOfListPartition(v, n.List); changedList {
		n.List = newList
		changed = true
	}
	if newRange, changedRange := walkSliceOfRangePartition(v, n.Range); changedRange {
		n.Range = newRange
		changed = true
	}
	return n, changed
}

func walkPartitionByIndex(v Visitor, n PartitionByIndex) (_ PartitionByIndex, changed bool) {
	if n.PartitionBy != nil {
		if newPartitionBy, changedPartitionBy := walkPartitionBy(v, *n.PartitionBy); changedPartitionBy {
			n.PartitionBy = &newPartitionBy
			changed = true
		}
	}
	return n, changed
}

func walkPartitionByTable(v Visitor, n PartitionByTable) (_ PartitionByTable, changed bool) {
	if n.PartitionBy != nil {
		if newPartitionBy, changedPartitionBy := walkPartitionBy(v, *n.PartitionBy); changedPartitionBy {
			n.PartitionBy = &newPartitionBy
			changed = true
		}
	}
	return n, changed
}

func walkRangePartition(v Visitor, n RangePartition) (_ RangePartition, changed bool) {
	if newFrom, changedFrom := walkExprs(v, n.From); changedFrom {
		n.From = newFrom
		changed = true
	}
	if newTo, changedTo := walkExprs(v, n.To); changedTo {
		n.To = newTo
		changed = true
	}
	if n.Subpartition != nil {
		if newSubpartition, changedSubpartition := walkPartitionBy(v, *n.Subpartition); changedSubpartition {
			n.Subpartition = &newSubpartition
			changed = true
		}
	}
	return n, changed
}

func walkRestoreOptions(v Visitor, n RestoreOptions) (_ RestoreOptions, changed bool) {
	if newEncryptionPassphrase, changedEncryptionPassphrase := WalkExpr(v, n.EncryptionPassphrase); changedEncryptionPassphrase {
		n.EncryptionPassphrase = newEncryptionPassphrase
		changed = true
	}
	if newDecryptionKMSURI, changedDecryptionKMSURI := walkStringOrPlaceholderOptList(v, n.DecryptionKMSURI); changedDecryptionKMSURI {
		n.DecryptionKMSURI = newDecryptionKMSURI
		changed = true
	}
	if newIntoDB, changedIntoDB := WalkExpr(v, n.IntoDB); changedIntoDB {
		n.IntoDB = newIntoDB
		changed = true
	}
	if newDebugPauseOn, changedDebugPauseOn := WalkExpr(v, n.DebugPauseOn); changedDebugPauseOn {
		n.DebugPauseOn = newDebugPauseOn
		changed = true
	}
	if newNewDBName, changedNewDBName := WalkExpr(v, n.NewDBName); changedNewDBName {
		n.NewDBName = newNewDBName
		changed = true
	}
	if newIncrementalStorage, changedIncrementalStorage := walkStringOrPlaceholderOptList(v, n.IncrementalStorage); changedIncrementalStorage {
		n.IncrementalStorage = newIncrementalStorage
		changed = true
	}
	if newAsTenant, changedAsTenant := WalkExpr(v, n.AsTenant); changedAsTenant {
		n.AsTenant = newAsTenant
		changed = true
	}
	return n, changed
}

func walkScheduleLabelSpec(v Visitor, n ScheduleLabelSpec) (_ ScheduleLabelSpec, changed bool) {
	if newLabel, changedLabel := WalkExpr(v, n.Label); changedLabel {
		n.Label = newLabel
		changed = true
	}
	return n, changed
}

func walkSelectExpr(v Visitor, n SelectExpr) (_ SelectExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkSelectExprs(v Visitor, n SelectExprs) (_ SelectExprs, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkSelectExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(SelectExprs(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkShardedIndexDef(v Visitor, n ShardedIndexDef) (_ ShardedIndexDef, changed bool) {
	if newShardBuckets, changedShardBuckets := WalkExpr(v, n.ShardBuckets); changedShardBuckets {
		n.ShardBuckets = newShardBuckets
		changed = true
	}
	return n, changed
}

func walkStorageParam(v Visitor, n StorageParam) (_ StorageParam, changed bool) {
	if newValue, changedValue := WalkExpr(v, n.Value); changedValue {
		n.Value = newValue
		changed = true
	}
	return n, changed
}

func walkStorageParams(v Visitor, n StorageParams) (_ StorageParams, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkStorageParam(v, n[i]); elemChanged {
			if !changed {
				n = append(StorageParams(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkStringOrPlaceholderOptList(v Visitor, n StringOrPlaceholderOptList) (_ StringOrPlaceholderOptList, changed bool) {
	for i := range n {
		if newElem, elemChanged := WalkExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(StringOrPlaceholderOptList(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkTableExprs(v Visitor, n TableExprs) (_ TableExprs, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkTableExpr(v, n[i]); elemChanged {
			if !changed {
				n = append(TableExprs(nil), n...)
				changed = true
			}
			n[i] = newElem
		}
	}
	return n, changed
}

func walkTransactionModes(v Visitor, n TransactionModes) (_ TransactionModes, changed bool) {
	if newAsOf, changedAsOf := walkAsOfClause(v, n.AsOf); changedAsOf {
		n.AsOf = newAsOf
		changed = true
	}
	return n, changed
}

func walkUpdateExpr(v Visitor, n UpdateExpr) (_ UpdateExpr, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkUpdateExprs(v Visitor, n UpdateExprs) (_ UpdateExprs, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkUpdateExpr(v, *n[i]); elemChanged {
			if !changed {
				n = append(UpdateExprs(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkWhen(v Visitor, n When) (_ When, changed bool) {
	if newCond, changedCond := WalkExpr(v, n.Cond); changedCond {
		n.Cond = newCond
		changed = true
	}
	if newVal, changedVal := WalkExpr(v, n.Val); changedVal {
		n.Val = newVal
		changed = true
	}
	return n, changed
}

func walkWhere(v Visitor, n Where) (_ Where, changed bool) {
	if newExpr, changedExpr := WalkExpr(v, n.Expr); changedExpr {
		n.Expr = newExpr
		changed = true
	}
	return n, changed
}

func walkWindow(v Visitor, n Window) (_ Window, changed bool) {
	for i := range n {
		if newElem, elemChanged := walkWindowDef(v, *n[i]); elemChanged {
			if !changed {
				n = append(Window(nil), n...)
				changed = true
			}
			n[i] = &newElem
		}
	}
	return n, changed
}

func walkWindowDef(v Visitor, n WindowDef) (_ WindowDef, changed bool) {
	if newPartitions, changedPartitions := walkExprs(v, n.Partitions); changedPartitions {
		n.Partitions = newPartitions
		changed = true
	}
	if newOrderBy, changedOrderBy := walkOrderBy(v, n.OrderBy); changedOrderBy {
		n.OrderBy = newOrderBy
		changed = true
	}
	if n.Frame != nil {
		if newFrame, changedFrame := walkWindowFrame(v, *n.Frame); changedFrame {
			n.Frame = &newFrame
			changed = true
		}
	}
	return n, changed
}

func walkWindowFrame(v Visitor, n WindowFrame) (_ WindowFrame, changed bool) {
	if newBounds, changedBounds := walkWindowFrameBounds(v, n.Bounds); changedBounds {
		n.Bounds = newBounds
		changed = true
	}
	return n, changed
}

func walkWindowFrameBound(v Visitor, n WindowFrameBound) (_ WindowFrameBound, changed bool) {
	if newOffsetExpr, changedOffsetExpr := WalkExpr(v, n.OffsetExpr); changedOffsetExpr {
		n.OffsetExpr = newOffsetExpr
		changed = true
	}
	return n, changed
}

func walkWindowFrameBounds(v Visitor, n WindowFrameBounds) (_ WindowFrameBounds, changed bool) {
	if n.StartBound != nil {
		if newStartBound, changedStartBound := walkWindowFrameBound(v, *n.StartBound); changedStartBound {
			n.StartBound = &newStartBound
			changed = true
		}
	}
	if n.EndBound != nil {
		if newEndBound, changedEndBound := walkWindowFrameBound(v, *n.EndBound); changedEndBound {
			n.EndBound = &newEndBound
			changed = true
		}
	}
	return n, changed
}

func walkWith(v Visitor, n With) (_ With, changed bool) {
	if newCTEList, changedCTEList := walkSliceOfStarCTE(v, n.CTEList); changedCTEList {
		n.CTEList = newCTEList
		changed = true
	}
	return n, changed
}
